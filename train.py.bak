from dispnet import *

def print_progress(value, max_value):
    width = 16
    fill = int(width*(value/max_value))
    empty = width - fill
    print( '\r['+ '#'*fill + ' '*empty  +']{}/{}'.format(value,max_value), end='')

def main():
    network = DispNet()

    if os.path.exists('dispnet.npz'):
        network.load('dispnet.npz')

    start_epoch = 0
    if os.path.exists('train_status.npz'):
        start_epoch += np.load('train_status.npz')['epoch']

    executor = ThreadPoolExecutor(max_workers=2)

    # Finally, launch the training loop.
    print("Starting training...")
    weights = [0,0,0,0,0,1]

    datasets = ['A','B','C']

    # We iterate over epochs:
    for epoch in range(start_epoch, 700):

        dataset = datasets[int(epoch/14)%3]

        print('Epoch {} (dataset: {}[{},{}])'.format(epoch+1, dataset,train_offset,train_offset+50))

        for i in range(0,6):
            x = epoch-(5-i)*100-150
            weights[i] = max(0,1 - abs(x/200))

        network.set_weights(weights)

        train_err = 0
        train_batches = 0
        start_time = time.time()

        print('train')

        future = executor.submit(load_random_training_batch)
        for batch_idx in range(0,50):
            print_progress(batch_idx,50)
            batch = future.result()
            future = executor.submit(load_batch, batch_idx+1, 'TRAIN', dataset)
            if batch != None:
                train_err += network.train(batch)
                train_batches += 1
            else:
                print('no files for batch! ({}, {})'.format(dataset,batch_idx))
        print_progress(50, 50)
        print('')

        val_err = 0
        val_batches = 0

        print('validate')

        validate_offset = 0 + (epoch % 10) * 5

        future = executor.submit(load_batch, validate_offset, 'TEST', dataset)
        for batch_idx in range(validate_offset, validate_offset + 5):
            print_progress(batch_idx - validate_offset, 5)
            batch = future.result()
            future = executor.submit(load_batch, batch_idx+1, 'TRAIN', dataset)
            if batch != None: 
                val_err += network.validate(batch)
                val_batches += 1
        print_progress(5, 5)
        print('')

        batch = load_batch(701,'TRAIN','C')
        disp_image = network.predict(batch)
        disp_image.save(('out/disp_val/{}.png').format(epoch))
        debug_image = network.debug(batch)
        debug_image.save(('out/debug_val/{}.png').format(epoch))

        batch = load_batch(0,'TRAIN','A')
        disp_image = network.predict(batch)
        disp_image.save(('out/disp_train/{}.png').format(epoch))
        debug_image = network.debug(batch)
        debug_image.save(('out/debug_train/{}.png').format(epoch))

        network.save('dispnet')
        network.save('dispnet.bak')
        np.savez('train_status', epoch=epoch+1)
        np.savez('train_status.bak', epoch=epoch+1)

        print("Epoch {} of {} took {:.3f}s".format(
            epoch + 1, 500, time.time() - start_time))
        print("  weights: \t\t", weights)
        print("  training loss:\t\t{:.6f}".format(train_err / train_batches))
        print("  validation loss:\t\t{:.6f}".format(val_err / val_batches))

if __name__ == '__main__':
    main()
